/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

/// Pixel to REM cacluator
/// @see https://gist.github.com/garystorey/5920051
/// @param {Number} $size - The pixel size to convert
/// @param {Boolean} $unitless - Should the unit be stripped away?
/// @return {Number} - A REM number
@function rem-calc($size: 16px, $unitless: false) {
  // This is a tiny hack that ensures 'null' and 'rem' values get returned straight away
  @if type-of($size) != number or str-index('#{$size}', rem) != null {
    @return $size;
  }

  // Divide the size by the base page font size
  $size: $size / 16px;

  @if $unitless {
    @return strip-unit($size);
  }



  @return $size * 1rem;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

/// Generates a percentage based on the aspect ratio supplied
/// @param {Number} $width - X axis
/// @param {Number} $height - Y axis
/// @return {Number} - A percentage number representing the aspect ratio
@function aspect-ratio($width: 16, $height: 9) {
  @return ($height / $width) * 100%;
}

/// Creates a spacer size by converting a pixel value to REM
/// @param {Number} $size - The pixel size to generate from
/// @return {Number} - A REM number
@function create-spacer($size: 16px) {
  @return ($spacer * rem-calc($size, true));
}

/// Retrieves the spacer value for the given key
/// @param {String} $key - The key name for the spacer size
/// @return {Number} - A REM number
@function get-spacer($key) {
  @return map-get($spacers, $key);
}

/// Converts the input string to a unicode safe character
/// @param {String} $str - The input string to convert
/// @return {String} - The converted string
@function unicode($str) {
  @return unquote("\"") + $str + unquote("\"");
}

/// Appends the `$addition` selector with the `$base` selector
/// @param {String} $base - The initial selector
/// @param {String} $addition - String to append to `$base`
/// @return {String} - The joined selector
@function create-selector($base, $addition) {
  @return "#{selector-append($base, $addition)}";
}
